{"name": "test_tianqi[1]", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'token'", "trace": "self = <marry_pytest.api_testcase.test_tianqi_login.TestTianqi object at 0x0000000003AC0748>\ni = 1\n\n    @pytest.mark.parametrize('i', getdata[7])\n    def test_tianqi(self, i):\n        logger.info(\"开始测试:{}  测试用例:{}:\".format(self.getdata[4], self.getdata[5][i]))\n        res = RunMethod().run_main(self.getdata[0], self.getdata[1], self.getdata[2], self.getdata[3][i],\n>                                  token=self.getdata[8])\n\napi_testcase\\test_tianqi_login.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\run_method.py:28: in run_main\n    res = self.get_method(url, headers, data, **kwargs)\ncommon\\run_method.py:17: in get_method\n    response = requests.get(url=url, headers=headers, params=params, verify=False, **kwargs)\n..\\..\\pytest_Env\\lib\\site-packages\\requests\\api.py:76: in get\n    return request('get', url, params=params, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'get', url = 'https://restapi.amap.com/v3/weather/weatherInfo'\nkwargs = {'allow_redirects': True, 'headers': None, 'params': {'city': 120000, 'extensions': 'base', 'key': '289de14240ca4296c6abb310a9d87010', 'output': 'JSON'}, 'token': '110000', ...}\nsession = <requests.sessions.Session object at 0x0000000004724438>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'token'\n\n..\\..\\pytest_Env\\lib\\site-packages\\requests\\api.py:61: TypeError"}, "attachments": [{"name": "log", "source": "7d9be7a0-db02-4cd0-8101-e787a55a7330-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "i", "value": "1"}], "start": 1653119982197, "stop": 1653119982198, "uuid": "ba397c93-5b12-4064-9889-3b6623597cc6", "historyId": "a8c78ed4cd3616f748afe87d7aca4b0b", "testCaseId": "05c19e8f937bccaff333cd5529b5ae2d", "fullName": "api_testcase.test_tianqi_login.TestTianqi#test_tianqi", "labels": [{"name": "parentSuite", "value": "api_testcase"}, {"name": "suite", "value": "test_tianqi_login"}, {"name": "subSuite", "value": "TestTianqi"}, {"name": "host", "value": "wang"}, {"name": "thread", "value": "47752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "api_testcase.test_tianqi_login"}]}